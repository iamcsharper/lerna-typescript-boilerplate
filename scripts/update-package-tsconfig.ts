import * as fs from "fs";
import * as path from "path";

const PACKAGE_TSCONFIG = "tsconfig.package.json";
const PROJECT_TSCONFIG = "tsconfig.project.json";
const TSCONFIG_COMMENT = `// GENERATED by update-package-tsconfig\n`;

export const update = () => {
  const root = path.join(__dirname, "..");
  const packages = path.join(__dirname, "..", "packages");
  const apps = path.join(__dirname, "..", "apps");

  const getNormalizedDirs = (dir: string) => {
    return fs
      .readdirSync(dir)
      .map((e) => path.join(dir, e))
      .filter((item) => fs.lstatSync(item).isDirectory())
      .map((item) => path.relative(root, item).replace(/\\/g, "/"));
  };

  const packageDirectories = [
    ...getNormalizedDirs(packages),
    ...getNormalizedDirs(apps),
  ];

  type DirectoryName = string;
  type PackageName = string;

  const packageJSONMap: Map<
    PackageName,
    {
      name: string;
      dependencies: { [packageName: string]: string };
      devDependencies: { [packageName: string]: string };
    }
  > = new Map();

  const packageDirnameMap: Map<PackageName, DirectoryName> = new Map();

  packageDirectories.forEach((packageDirname) => {
    const packageJSONPath = path.join(root, packageDirname, "package.json");
    const packageJSONData = JSON.parse(
      fs.readFileSync(packageJSONPath).toString()
    );
    const packageName = packageJSONData.name;
    packageDirnameMap.set(packageName, packageDirname);
    packageJSONMap.set(packageName, packageJSONData);
  });

  const internalDependencyMap: Map<string, string[]> = new Map();
  packageDirnameMap.forEach((_packageDirname, packageName) => {
    const { dependencies, devDependencies } = packageJSONMap.get(packageName)!;

    const internalDependencies = [
      ...(dependencies ? Object.keys(dependencies) : []),
      ...(devDependencies ? Object.keys(devDependencies) : []),
    ].filter((dep) => {
      return packageDirnameMap.has(dep);
    });

    internalDependencyMap.set(packageName, internalDependencies);
  });

  function resolveInternalDependencies(dependencies: string[]): string[] {
    const childDeps = [];

    for (let idep of dependencies) {
      const deps = internalDependencyMap.get(idep)!;
      const res = resolveInternalDependencies(deps);
      for (let jdep of res) {
        childDeps.push(jdep);
      }
    }
    const resolved = childDeps.concat(dependencies);
    // remove all duplicated after the first appearance
    return resolved.filter((item, idx) => resolved.indexOf(item) === idx);
  }

  packageDirnameMap.forEach((packageDirname, packageName) => {
    const tsconfigPath = path.join(root, packageDirname, PACKAGE_TSCONFIG);

    const internalDependencies = resolveInternalDependencies(
      internalDependencyMap.get(packageName)!
    );

    const tsconfigData = {
      extends: "../../tsconfig.base.json",
      compilerOptions: {
        outDir: "./lib",
        rootDir: "./src",
        composite: true,
      },
      references: internalDependencies.map((dep) => {
        return {
          path:
            path
              .relative(
                path.join(root, packageDirname),
                path.join(root, packageDirnameMap.get(dep)!)
              )
              .replace(/\\/g, "/") + `/${PACKAGE_TSCONFIG}`,
        };
      }),
      include: ["src"],
      exclude: ["tests", "lib"],
    };

    fs.writeFileSync(
      tsconfigPath,
      TSCONFIG_COMMENT + JSON.stringify(tsconfigData, null, "  ")
    );
  });

  const createModulesTsconfig = (root: string) => {
    const projectLevelTsconfigPath = path.join(root, PROJECT_TSCONFIG);

    const projectLevelTsconfigData = {
      files: [],
      references: resolveInternalDependencies(
        Array.from(packageDirnameMap.keys())
      ).map((packageName) => ({
        path:
          path
            .relative(root, packageDirnameMap.get(packageName)!)
            .replace(/\\/g, "/") + `/${PACKAGE_TSCONFIG}`,
      })),
    };

    fs.writeFileSync(
      projectLevelTsconfigPath,
      TSCONFIG_COMMENT + JSON.stringify(projectLevelTsconfigData, null, "  ")
    );
  };

  createModulesTsconfig("apps");
  createModulesTsconfig("packages");
};

if (require.main === module) {
  update();

  console.log("Tsconfigs resolved");
}
